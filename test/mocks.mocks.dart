// Mocks generated by Mockito 5.4.6 from annotations
// in bitkub_test/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:typed_data' as _i28;

import 'package:bitkub_test/core/crypto/device_crypto_service.dart' as _i27;
import 'package:bitkub_test/data/api_client/api_client.dart' as _i8;
import 'package:bitkub_test/data/data_sources/auth_remote/auth_remote_data_source.dart'
    as _i10;
import 'package:bitkub_test/data/data_sources/auth_remote/user_remote/user_remote_data_source.dart'
    as _i36;
import 'package:bitkub_test/data/dtos/auth_dto.dart' as _i2;
import 'package:bitkub_test/data/dtos/otp_ref.dart' as _i3;
import 'package:bitkub_test/data/dtos/requests/complete_sign_up_request_dto.dart'
    as _i14;
import 'package:bitkub_test/data/dtos/requests/sign_in_request_dto.dart'
    as _i11;
import 'package:bitkub_test/data/dtos/requests/sign_up_request_dto.dart'
    as _i12;
import 'package:bitkub_test/data/dtos/requests/submit_otp_request_dto.dart'
    as _i13;
import 'package:bitkub_test/data/dtos/sign_up_token_dto.dart' as _i4;
import 'package:bitkub_test/data/dtos/user_dto.dart' as _i7;
import 'package:bitkub_test/domain/entities/auth.dart' as _i17;
import 'package:bitkub_test/domain/entities/otp_ref.dart' as _i20;
import 'package:bitkub_test/domain/entities/requests/complete_sign_up_request.dart'
    as _i24;
import 'package:bitkub_test/domain/entities/requests/sign_in_request.dart'
    as _i18;
import 'package:bitkub_test/domain/entities/requests/sign_up_request.dart'
    as _i21;
import 'package:bitkub_test/domain/entities/requests/submit_otp_request.dart'
    as _i23;
import 'package:bitkub_test/domain/entities/sign_up_token.dart' as _i22;
import 'package:bitkub_test/domain/entities/user.dart' as _i26;
import 'package:bitkub_test/domain/repositories/auth_repository.dart' as _i15;
import 'package:bitkub_test/domain/repositories/token_repository.dart' as _i35;
import 'package:bitkub_test/domain/repositories/user_repository.dart' as _i37;
import 'package:bitkub_test/domain/use_cases/complete_sign_up_use_case.dart'
    as _i25;
import 'package:bitkub_test/domain/use_cases/sign_in_use_case.dart' as _i32;
import 'package:bitkub_test/domain/use_cases/sign_out_use_case.dart' as _i33;
import 'package:bitkub_test/domain/use_cases/splash_use_case.dart' as _i34;
import 'package:bitkub_test/domain/utils/result.dart' as _i16;
import 'package:bitkub_test/ui/session/session_cubit.dart' as _i30;
import 'package:bitkub_test/ui/session/session_state.dart' as _i6;
import 'package:flutter/foundation.dart' as _i29;
import 'package:flutter_bloc/flutter_bloc.dart' as _i31;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthDto_0 extends _i1.SmartFake implements _i2.AuthDto {
  _FakeAuthDto_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOtpRefDto_1 extends _i1.SmartFake implements _i3.OtpRefDto {
  _FakeOtpRefDto_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSignUpTokenDto_2 extends _i1.SmartFake
    implements _i4.SignUpTokenDto {
  _FakeSignUpTokenDto_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSOptions_3 extends _i1.SmartFake implements _i5.IOSOptions {
  _FakeIOSOptions_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidOptions_4 extends _i1.SmartFake
    implements _i5.AndroidOptions {
  _FakeAndroidOptions_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxOptions_5 extends _i1.SmartFake implements _i5.LinuxOptions {
  _FakeLinuxOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsOptions_6 extends _i1.SmartFake
    implements _i5.WindowsOptions {
  _FakeWindowsOptions_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebOptions_7 extends _i1.SmartFake implements _i5.WebOptions {
  _FakeWebOptions_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsOptions_8 extends _i1.SmartFake implements _i5.MacOsOptions {
  _FakeMacOsOptions_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSessionState_9 extends _i1.SmartFake implements _i6.SessionState {
  _FakeSessionState_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserDto_10 extends _i1.SmartFake implements _i7.UserDto {
  _FakeUserDto_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i8.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<Map<String, dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {#queryParameters: queryParameters},
            ),
            returnValue: _i9.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i9.Future<Map<String, dynamic>>);

  @override
  _i9.Future<Map<String, dynamic>> post(
    String? path, {
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#post, [path], {#data: data}),
            returnValue: _i9.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i9.Future<Map<String, dynamic>>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i10.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.AuthDto> signIn({required _i11.SignInRequestDto? request}) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [], {#request: request}),
            returnValue: _i9.Future<_i2.AuthDto>.value(
              _FakeAuthDto_0(
                this,
                Invocation.method(#signIn, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i2.AuthDto>);

  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i3.OtpRefDto> signUp({required _i12.SignUpRequestDto? request}) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {#request: request}),
            returnValue: _i9.Future<_i3.OtpRefDto>.value(
              _FakeOtpRefDto_1(
                this,
                Invocation.method(#signUp, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i3.OtpRefDto>);

  @override
  _i9.Future<_i4.SignUpTokenDto> submitOtp({
    required _i13.SubmitOtpRequestDto? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#submitOtp, [], {#request: request}),
            returnValue: _i9.Future<_i4.SignUpTokenDto>.value(
              _FakeSignUpTokenDto_2(
                this,
                Invocation.method(#submitOtp, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i4.SignUpTokenDto>);

  @override
  _i9.Future<_i2.AuthDto> completeSignUp({
    required _i14.CompleteSignUpRequestDto? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#completeSignUp, [], {#request: request}),
            returnValue: _i9.Future<_i2.AuthDto>.value(
              _FakeAuthDto_0(
                this,
                Invocation.method(#completeSignUp, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i2.AuthDto>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i15.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.Result<_i17.Auth>> signIn({
    required _i18.SignInRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [], {#request: request}),
            returnValue: _i9.Future<_i16.Result<_i17.Auth>>.value(
              _i19.dummyValue<_i16.Result<_i17.Auth>>(
                this,
                Invocation.method(#signIn, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i17.Auth>>);

  @override
  _i9.Future<_i16.Result<_i16.Unit>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<_i16.Result<_i16.Unit>>.value(
              _i19.dummyValue<_i16.Result<_i16.Unit>>(
                this,
                Invocation.method(#signOut, []),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i16.Unit>>);

  @override
  _i9.Future<_i16.Result<_i20.OtpRef>> signUp({
    required _i21.SignUpRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {#request: request}),
            returnValue: _i9.Future<_i16.Result<_i20.OtpRef>>.value(
              _i19.dummyValue<_i16.Result<_i20.OtpRef>>(
                this,
                Invocation.method(#signUp, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i20.OtpRef>>);

  @override
  _i9.Future<_i16.Result<_i22.SignUpToken>> submitOtp({
    required _i23.SubmitOtpRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#submitOtp, [], {#request: request}),
            returnValue: _i9.Future<_i16.Result<_i22.SignUpToken>>.value(
              _i19.dummyValue<_i16.Result<_i22.SignUpToken>>(
                this,
                Invocation.method(#submitOtp, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i22.SignUpToken>>);

  @override
  _i9.Future<_i16.Result<_i17.Auth>> completeSignUp({
    required _i24.CompleteSignUpRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#completeSignUp, [], {#request: request}),
            returnValue: _i9.Future<_i16.Result<_i17.Auth>>.value(
              _i19.dummyValue<_i16.Result<_i17.Auth>>(
                this,
                Invocation.method(#completeSignUp, [], {#request: request}),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i17.Auth>>);
}

/// A class which mocks [CompleteSignUpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteSignUpUseCase extends _i1.Mock
    implements _i25.CompleteSignUpUseCase {
  MockCompleteSignUpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.Result<_i26.User>> call(
    _i24.CompleteSignUpRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [request]),
            returnValue: _i9.Future<_i16.Result<_i26.User>>.value(
              _i19.dummyValue<_i16.Result<_i26.User>>(
                this,
                Invocation.method(#call, [request]),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i26.User>>);
}

/// A class which mocks [DeviceCryptoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceCryptoService extends _i1.Mock
    implements _i27.DeviceCryptoService {
  MockDeviceCryptoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i28.Uint8List> encrypt(_i28.Uint8List? plain, {String? aad}) =>
      (super.noSuchMethod(
            Invocation.method(#encrypt, [plain], {#aad: aad}),
            returnValue: _i9.Future<_i28.Uint8List>.value(_i28.Uint8List(0)),
          )
          as _i9.Future<_i28.Uint8List>);

  @override
  _i9.Future<_i28.Uint8List> decrypt(_i28.Uint8List? combined, {String? aad}) =>
      (super.noSuchMethod(
            Invocation.method(#decrypt, [combined], {#aad: aad}),
            returnValue: _i9.Future<_i28.Uint8List>.value(_i28.Uint8List(0)),
          )
          as _i9.Future<_i28.Uint8List>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i5.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.IOSOptions get iOptions =>
      (super.noSuchMethod(
            Invocation.getter(#iOptions),
            returnValue: _FakeIOSOptions_3(this, Invocation.getter(#iOptions)),
          )
          as _i5.IOSOptions);

  @override
  _i5.AndroidOptions get aOptions =>
      (super.noSuchMethod(
            Invocation.getter(#aOptions),
            returnValue: _FakeAndroidOptions_4(
              this,
              Invocation.getter(#aOptions),
            ),
          )
          as _i5.AndroidOptions);

  @override
  _i5.LinuxOptions get lOptions =>
      (super.noSuchMethod(
            Invocation.getter(#lOptions),
            returnValue: _FakeLinuxOptions_5(
              this,
              Invocation.getter(#lOptions),
            ),
          )
          as _i5.LinuxOptions);

  @override
  _i5.WindowsOptions get wOptions =>
      (super.noSuchMethod(
            Invocation.getter(#wOptions),
            returnValue: _FakeWindowsOptions_6(
              this,
              Invocation.getter(#wOptions),
            ),
          )
          as _i5.WindowsOptions);

  @override
  _i5.WebOptions get webOptions =>
      (super.noSuchMethod(
            Invocation.getter(#webOptions),
            returnValue: _FakeWebOptions_7(
              this,
              Invocation.getter(#webOptions),
            ),
          )
          as _i5.WebOptions);

  @override
  _i5.MacOsOptions get mOptions =>
      (super.noSuchMethod(
            Invocation.getter(#mOptions),
            returnValue: _FakeMacOsOptions_8(
              this,
              Invocation.getter(#mOptions),
            ),
          )
          as _i5.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i29.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#registerListener, [], {#key: key, #listener: listener}),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterListener({
    required String? key,
    required _i29.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#unregisterListener, [], {
      #key: key,
      #listener: listener,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(#unregisterAllListenersForKey, [], {#key: key}),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
    Invocation.method(#unregisterAllListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> write({
    required String? key,
    required String? value,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {
              #key: key,
              #value: value,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<String?> read({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i9.Future<String?>.value(),
          )
          as _i9.Future<String?>);

  @override
  _i9.Future<bool> containsKey({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);

  @override
  _i9.Future<void> delete({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<Map<String, String>> readAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i9.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i9.Future<Map<String, String>>);

  @override
  _i9.Future<void> deleteAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<bool?> isCupertinoProtectedDataAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isCupertinoProtectedDataAvailable, []),
            returnValue: _i9.Future<bool?>.value(),
          )
          as _i9.Future<bool?>);
}

/// A class which mocks [SessionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionCubit extends _i1.Mock implements _i30.SessionCubit {
  MockSessionCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.SessionState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeSessionState_9(this, Invocation.getter(#state)),
          )
          as _i6.SessionState);

  @override
  _i9.Stream<_i6.SessionState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i9.Stream<_i6.SessionState>.empty(),
          )
          as _i9.Stream<_i6.SessionState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void setUser(_i26.User? user) => super.noSuchMethod(
    Invocation.method(#setUser, [user]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.SessionState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i31.Change<_i6.SessionState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i32.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.Result<_i26.User>> call(_i18.SignInRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#call, [request]),
            returnValue: _i9.Future<_i16.Result<_i26.User>>.value(
              _i19.dummyValue<_i16.Result<_i26.User>>(
                this,
                Invocation.method(#call, [request]),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i26.User>>);
}

/// A class which mocks [SignOutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOutUseCase extends _i1.Mock implements _i33.SignOutUseCase {
  MockSignOutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.Result<_i16.Unit>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i9.Future<_i16.Result<_i16.Unit>>.value(
              _i19.dummyValue<_i16.Result<_i16.Unit>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i16.Unit>>);
}

/// A class which mocks [SplashUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplashUseCase extends _i1.Mock implements _i34.SplashUseCase {
  MockSplashUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.Result<_i26.User?>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i9.Future<_i16.Result<_i26.User?>>.value(
              _i19.dummyValue<_i16.Result<_i26.User?>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i26.User?>>);
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i35.TokenRepository {
  MockTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> saveAuth(_i17.Auth? auth) =>
      (super.noSuchMethod(
            Invocation.method(#saveAuth, [auth]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i17.Auth?> readAuth() =>
      (super.noSuchMethod(
            Invocation.method(#readAuth, []),
            returnValue: _i9.Future<_i17.Auth?>.value(),
          )
          as _i9.Future<_i17.Auth?>);

  @override
  _i9.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i36.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i7.UserDto> me() =>
      (super.noSuchMethod(
            Invocation.method(#me, []),
            returnValue: _i9.Future<_i7.UserDto>.value(
              _FakeUserDto_10(this, Invocation.method(#me, [])),
            ),
          )
          as _i9.Future<_i7.UserDto>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i37.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.Result<_i26.User>> me() =>
      (super.noSuchMethod(
            Invocation.method(#me, []),
            returnValue: _i9.Future<_i16.Result<_i26.User>>.value(
              _i19.dummyValue<_i16.Result<_i26.User>>(
                this,
                Invocation.method(#me, []),
              ),
            ),
          )
          as _i9.Future<_i16.Result<_i26.User>>);
}
